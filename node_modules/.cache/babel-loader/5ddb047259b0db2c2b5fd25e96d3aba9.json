{"ast":null,"code":"export const allOrganizations = organizations => {\n  return {\n    type: \"INDEX_ORGANIZATIONS\",\n    organizations\n  };\n};\nexport const fetchOrganizations = () => {\n  return dispatch => {\n    return fetch(\"http://localhost:3000/api/v1/organizations/index\", {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(r => r.json()).then(response => {\n      if (response.error) {\n        alert(response.error);\n      } else {\n        dispatch(allOrganizations(response.data));\n      }\n    }).catch(console.log);\n  };\n};","map":{"version":3,"sources":["/Users/lesliegonzalez/Development/code/centerpoint-frontend/src/actions/organizations.js"],"names":["allOrganizations","organizations","type","fetchOrganizations","dispatch","fetch","credentials","method","headers","then","r","json","response","error","alert","data","catch","console","log"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAGC,aAAa,IAAI;AAC/C,SAAO;AACLC,IAAAA,IAAI,EAAE,qBADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAME,kBAAkB,GAAG,MAAM;AACtC,SAAOC,QAAQ,IAAI;AACjB,WAAOC,KAAK,CAAC,kDAAD,EAAqD;AAC/DC,MAAAA,WAAW,EAAE,SADkD;AAE/DC,MAAAA,MAAM,EAAE,KAFuD;AAG/DC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHsD,KAArD,CAAL,CAOJC,IAPI,CAOCC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAPN,EAQJF,IARI,CAQCG,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,KAAb,EAAoB;AAClBC,QAAAA,KAAK,CAACF,QAAQ,CAACC,KAAV,CAAL;AACD,OAFD,MAEO;AACLT,QAAAA,QAAQ,CAACJ,gBAAgB,CAACY,QAAQ,CAACG,IAAV,CAAjB,CAAR;AACD;AACF,KAdI,EAeJC,KAfI,CAeEC,OAAO,CAACC,GAfV,CAAP;AAgBD,GAjBD;AAkBD,CAnBM","sourcesContent":["export const allOrganizations = organizations => {\n  return {\n    type: \"INDEX_ORGANIZATIONS\",\n    organizations\n  }\n}\n\nexport const fetchOrganizations = () => {\n  return dispatch => {\n    return fetch(\"http://localhost:3000/api/v1/organizations/index\", {\n      credentials: \"include\",\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n    })\n      .then(r => r.json())\n      .then(response => {\n        if (response.error) {\n          alert(response.error)\n        } else {\n          dispatch(allOrganizations(response.data))\n        }\n      })\n      .catch(console.log)\n  }\n}"]},"metadata":{},"sourceType":"module"}